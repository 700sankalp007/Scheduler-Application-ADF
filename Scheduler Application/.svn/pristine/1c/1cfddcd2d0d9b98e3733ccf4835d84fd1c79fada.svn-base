package sc.common.model.entities;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import sc.common.model.util.ObjectConversion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 19 18:42:01 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReportRunHistoryEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Id,
        ServiceType,
        Status,
        RecordProcessed,
        StartTime,
        EndTme,
        SchedulerId,
        RunType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int SERVICETYPE = AttributesEnum.ServiceType.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int RECORDPROCESSED = AttributesEnum.RecordProcessed.index();
    public static final int STARTTIME = AttributesEnum.StartTime.index();
    public static final int ENDTME = AttributesEnum.EndTme.index();
    public static final int SCHEDULERID = AttributesEnum.SchedulerId.index();
    public static final int RUNTYPE = AttributesEnum.RunType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReportRunHistoryEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("sc.common.model.entities.ReportRunHistoryEO");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for ServiceType, using the alias name ServiceType.
     * @return the value of ServiceType
     */
    public String getServiceType() {
        return (String) getAttributeInternal(SERVICETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ServiceType.
     * @param value value to set the ServiceType
     */
    public void setServiceType(String value) {
        setAttributeInternal(SERVICETYPE, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for RecordProcessed, using the alias name RecordProcessed.
     * @return the value of RecordProcessed
     */
    public String getRecordProcessed() {
        return (String) getAttributeInternal(RECORDPROCESSED);
    }

    /**
     * Sets <code>value</code> as the attribute value for RecordProcessed.
     * @param value value to set the RecordProcessed
     */
    public void setRecordProcessed(String value) {
        setAttributeInternal(RECORDPROCESSED, value);
    }

    /**
     * Gets the attribute value for StartTime, using the alias name StartTime.
     * @return the value of StartTime
     */
    public Timestamp getStartTime() {
        return (Timestamp) getAttributeInternal(STARTTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for StartTime.
     * @param value value to set the StartTime
     */
    public void setStartTime(Timestamp value) {
        setAttributeInternal(STARTTIME, value);
    }

    /**
     * Gets the attribute value for EndTme, using the alias name EndTme.
     * @return the value of EndTme
     */
    public Timestamp getEndTme() {
        return (Timestamp) getAttributeInternal(ENDTME);
    }

    /**
     * Sets <code>value</code> as the attribute value for EndTme.
     * @param value value to set the EndTme
     */
    public void setEndTme(Timestamp value) {
        setAttributeInternal(ENDTME, value);
    }

    /**
     * Gets the attribute value for SchedulerId, using the alias name SchedulerId.
     * @return the value of SchedulerId
     */
    public BigDecimal getSchedulerId() {
        return (BigDecimal) getAttributeInternal(SCHEDULERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchedulerId.
     * @param value value to set the SchedulerId
     */
    public void setSchedulerId(BigDecimal value) {
        setAttributeInternal(SCHEDULERID, value);
    }


    /**
     * Gets the attribute value for RunType, using the alias name RunType.
     * @return the value of RunType
     */
    public String getRunType() {
        return (String) getAttributeInternal(RUNTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RunType.
     * @param value value to set the RunType
     */
    public void setRunType(String value) {
        setAttributeInternal(RUNTYPE, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XX_SCH_REPORT_RUN_HIST_SEQ", getDBTransaction());
                try {
                    setId(ObjectConversion.convertNumberToBigDecimal(seq.getSequenceNumber()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

