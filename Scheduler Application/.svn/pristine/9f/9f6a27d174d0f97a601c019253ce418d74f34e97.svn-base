package sc.common.model.entities;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import sc.common.model.util.ObjectConversion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 04 21:27:57 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReportSetupDetailEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        EiRepDtlId,
        EiRepHeaderId,
        ParamName,
        ParamSqlType,
        DefualtVal,
        LastValLookupType,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        SqlStatement;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EIREPDTLID = AttributesEnum.EiRepDtlId.index();
    public static final int EIREPHEADERID = AttributesEnum.EiRepHeaderId.index();
    public static final int PARAMNAME = AttributesEnum.ParamName.index();
    public static final int PARAMSQLTYPE = AttributesEnum.ParamSqlType.index();
    public static final int DEFUALTVAL = AttributesEnum.DefualtVal.index();
    public static final int LASTVALLOOKUPTYPE = AttributesEnum.LastValLookupType.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int SQLSTATEMENT = AttributesEnum.SqlStatement.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReportSetupDetailEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("sc.common.model.entities.ReportSetupDetailEO");
    }


    /**
     * Gets the attribute value for EiRepDtlId, using the alias name EiRepDtlId.
     * @return the value of EiRepDtlId
     */
    public BigDecimal getEiRepDtlId() {
        return (BigDecimal) getAttributeInternal(EIREPDTLID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EiRepDtlId.
     * @param value value to set the EiRepDtlId
     */
    public void setEiRepDtlId(BigDecimal value) {
        setAttributeInternal(EIREPDTLID, value);
    }

    /**
     * Gets the attribute value for EiRepHeaderId, using the alias name EiRepHeaderId.
     * @return the value of EiRepHeaderId
     */
    public BigDecimal getEiRepHeaderId() {
        return (BigDecimal) getAttributeInternal(EIREPHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EiRepHeaderId.
     * @param value value to set the EiRepHeaderId
     */
    public void setEiRepHeaderId(BigDecimal value) {
        setAttributeInternal(EIREPHEADERID, value);
    }

    /**
     * Gets the attribute value for ParamName, using the alias name ParamName.
     * @return the value of ParamName
     */
    public String getParamName() {
        return (String) getAttributeInternal(PARAMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamName.
     * @param value value to set the ParamName
     */
    public void setParamName(String value) {
        setAttributeInternal(PARAMNAME, value);
    }

    /**
     * Gets the attribute value for ParamSqlType, using the alias name ParamSqlType.
     * @return the value of ParamSqlType
     */
    public String getParamSqlType() {
        return (String) getAttributeInternal(PARAMSQLTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamSqlType.
     * @param value value to set the ParamSqlType
     */
    public void setParamSqlType(String value) {
        setAttributeInternal(PARAMSQLTYPE, value);
    }

    /**
     * Gets the attribute value for DefualtVal, using the alias name DefualtVal.
     * @return the value of DefualtVal
     */
    public String getDefualtVal() {
        return (String) getAttributeInternal(DEFUALTVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for DefualtVal.
     * @param value value to set the DefualtVal
     */
    public void setDefualtVal(String value) {
        setAttributeInternal(DEFUALTVAL, value);
    }

    /**
     * Gets the attribute value for LastValLookupType, using the alias name LastValLookupType.
     * @return the value of LastValLookupType
     */
    public String getLastValLookupType() {
        return (String) getAttributeInternal(LASTVALLOOKUPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastValLookupType.
     * @param value value to set the LastValLookupType
     */
    public void setLastValLookupType(String value) {
        setAttributeInternal(LASTVALLOOKUPTYPE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for SqlStatement, using the alias name SqlStatement.
     * @return the value of SqlStatement
     */
    public String getSqlStatement() {
        return (String) getAttributeInternal(SQLSTATEMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SqlStatement.
     * @param value value to set the SqlStatement
     */
    public void setSqlStatement(String value) {
        setAttributeInternal(SQLSTATEMENT, value);
    }


    /**
     * @param eiRepDtlId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal eiRepDtlId) {
        return new Key(new Object[] { eiRepDtlId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XX_SCH_REPORT_SETUP_DTL_SEQ", getDBTransaction());
        try {
            setEiRepDtlId(ObjectConversion.convertNumberToBigDecimal(seq.getSequenceNumber()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

