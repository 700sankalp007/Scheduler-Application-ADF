package sc.common.model.entities;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import sc.common.model.util.ObjectConversion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 04 21:28:09 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReportDataMappingEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        MapId,
        ReportColName,
        ReportSeqName,
        TableColName,
        DefaultValue,
        ReportHeaderId,
        PrimaryFlag,
        DateFormat,
        IsSeq,
        ColumnDataType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int MAPID = AttributesEnum.MapId.index();
    public static final int REPORTCOLNAME = AttributesEnum.ReportColName.index();
    public static final int REPORTSEQNAME = AttributesEnum.ReportSeqName.index();
    public static final int TABLECOLNAME = AttributesEnum.TableColName.index();
    public static final int DEFAULTVALUE = AttributesEnum.DefaultValue.index();
    public static final int REPORTHEADERID = AttributesEnum.ReportHeaderId.index();
    public static final int PRIMARYFLAG = AttributesEnum.PrimaryFlag.index();
    public static final int DATEFORMAT = AttributesEnum.DateFormat.index();
    public static final int ISSEQ = AttributesEnum.IsSeq.index();
    public static final int COLUMNDATATYPE = AttributesEnum.ColumnDataType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReportDataMappingEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("sc.common.model.entities.ReportDataMappingEO");
    }


    /**
     * Gets the attribute value for MapId, using the alias name MapId.
     * @return the value of MapId
     */
    public BigDecimal getMapId() {
        return (BigDecimal) getAttributeInternal(MAPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MapId.
     * @param value value to set the MapId
     */
    public void setMapId(BigDecimal value) {
        setAttributeInternal(MAPID, value);
    }

    /**
     * Gets the attribute value for ReportColName, using the alias name ReportColName.
     * @return the value of ReportColName
     */
    public String getReportColName() {
        return (String) getAttributeInternal(REPORTCOLNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportColName.
     * @param value value to set the ReportColName
     */
    public void setReportColName(String value) {
        setAttributeInternal(REPORTCOLNAME, value);
    }

    /**
     * Gets the attribute value for ReportSeqName, using the alias name ReportSeqName.
     * @return the value of ReportSeqName
     */
    public Long getReportSeqName() {
        return (Long) getAttributeInternal(REPORTSEQNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportSeqName.
     * @param value value to set the ReportSeqName
     */
    public void setReportSeqName(Long value) {
        setAttributeInternal(REPORTSEQNAME, value);
    }

    /**
     * Gets the attribute value for TableColName, using the alias name TableColName.
     * @return the value of TableColName
     */
    public String getTableColName() {
        return (String) getAttributeInternal(TABLECOLNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for TableColName.
     * @param value value to set the TableColName
     */
    public void setTableColName(String value) {
        setAttributeInternal(TABLECOLNAME, value);
    }

    /**
     * Gets the attribute value for DefaultValue, using the alias name DefaultValue.
     * @return the value of DefaultValue
     */
    public String getDefaultValue() {
        return (String) getAttributeInternal(DEFAULTVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DefaultValue.
     * @param value value to set the DefaultValue
     */
    public void setDefaultValue(String value) {
        setAttributeInternal(DEFAULTVALUE, value);
    }

    /**
     * Gets the attribute value for ReportHeaderId, using the alias name ReportHeaderId.
     * @return the value of ReportHeaderId
     */
    public BigDecimal getReportHeaderId() {
        return (BigDecimal) getAttributeInternal(REPORTHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportHeaderId.
     * @param value value to set the ReportHeaderId
     */
    public void setReportHeaderId(BigDecimal value) {
        setAttributeInternal(REPORTHEADERID, value);
    }

    /**
     * Gets the attribute value for PrimaryFlag, using the alias name PrimaryFlag.
     * @return the value of PrimaryFlag
     */
    public String getPrimaryFlag() {
        return (String) getAttributeInternal(PRIMARYFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrimaryFlag.
     * @param value value to set the PrimaryFlag
     */
    public void setPrimaryFlag(String value) {
        setAttributeInternal(PRIMARYFLAG, value);
    }

    /**
     * Gets the attribute value for DateFormat, using the alias name DateFormat.
     * @return the value of DateFormat
     */
    public String getDateFormat() {
        return (String) getAttributeInternal(DATEFORMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateFormat.
     * @param value value to set the DateFormat
     */
    public void setDateFormat(String value) {
        setAttributeInternal(DATEFORMAT, value);
    }

    /**
     * Gets the attribute value for IsSeq, using the alias name IsSeq.
     * @return the value of IsSeq
     */
    public String getIsSeq() {
        return (String) getAttributeInternal(ISSEQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsSeq.
     * @param value value to set the IsSeq
     */
    public void setIsSeq(String value) {
        setAttributeInternal(ISSEQ, value);
    }


    /**
     * Gets the attribute value for ColumnDataType, using the alias name ColumnDataType.
     * @return the value of ColumnDataType
     */
    public String getColumnDataType() {
        return (String) getAttributeInternal(COLUMNDATATYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ColumnDataType.
     * @param value value to set the ColumnDataType
     */
    public void setColumnDataType(String value) {
        setAttributeInternal(COLUMNDATATYPE, value);
    }


    /**
     * @param mapId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal mapId) {
        return new Key(new Object[] { mapId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
            SequenceImpl seq = new SequenceImpl("XX_SCH_REPORT_MAP_SEQ", getDBTransaction());
        try {
            setMapId(ObjectConversion.convertNumberToBigDecimal(seq.getSequenceNumber()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

