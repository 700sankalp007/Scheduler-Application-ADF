package sc.common.model.entities;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;

import sc.common.model.util.ObjectConversion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 04 16:55:20 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReportSetupHeaderEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        EiRepHeaderId,
        ReportPath,
        ReportDataTable,
        ReportDataFormat,
        ReportDataLocale,
        CreatedBy,
        CreatedDate,
        UpdatedBy,
        UpdatedDate,
        ServiceType,
        IsRefresh,
        Delimiter,
        RootNode,
        SchedulerId,
        EssJobName;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EIREPHEADERID = AttributesEnum.EiRepHeaderId.index();
    public static final int REPORTPATH = AttributesEnum.ReportPath.index();
    public static final int REPORTDATATABLE = AttributesEnum.ReportDataTable.index();
    public static final int REPORTDATAFORMAT = AttributesEnum.ReportDataFormat.index();
    public static final int REPORTDATALOCALE = AttributesEnum.ReportDataLocale.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATEDDATE = AttributesEnum.UpdatedDate.index();
    public static final int SERVICETYPE = AttributesEnum.ServiceType.index();
    public static final int ISREFRESH = AttributesEnum.IsRefresh.index();
    public static final int DELIMITER = AttributesEnum.Delimiter.index();
    public static final int ROOTNODE = AttributesEnum.RootNode.index();
    public static final int SCHEDULERID = AttributesEnum.SchedulerId.index();
    public static final int ESSJOBNAME = AttributesEnum.EssJobName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ReportSetupHeaderEOImpl() {
    }

    /**
     * Gets the attribute value for EiRepHeaderId, using the alias name EiRepHeaderId.
     * @return the value of EiRepHeaderId
     */
    public BigDecimal getEiRepHeaderId() {
        return (BigDecimal) getAttributeInternal(EIREPHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EiRepHeaderId.
     * @param value value to set the EiRepHeaderId
     */
    public void setEiRepHeaderId(BigDecimal value) {
        setAttributeInternal(EIREPHEADERID, value);
    }

    /**
     * Gets the attribute value for ReportPath, using the alias name ReportPath.
     * @return the value of ReportPath
     */
    public String getReportPath() {
        return (String) getAttributeInternal(REPORTPATH);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportPath.
     * @param value value to set the ReportPath
     */
    public void setReportPath(String value) {
        setAttributeInternal(REPORTPATH, value);
    }

    /**
     * Gets the attribute value for ReportDataTable, using the alias name ReportDataTable.
     * @return the value of ReportDataTable
     */
    public String getReportDataTable() {
        return (String) getAttributeInternal(REPORTDATATABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportDataTable.
     * @param value value to set the ReportDataTable
     */
    public void setReportDataTable(String value) {
        setAttributeInternal(REPORTDATATABLE, value);
    }

    /**
     * Gets the attribute value for ReportDataFormat, using the alias name ReportDataFormat.
     * @return the value of ReportDataFormat
     */
    public String getReportDataFormat() {
        return (String) getAttributeInternal(REPORTDATAFORMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportDataFormat.
     * @param value value to set the ReportDataFormat
     */
    public void setReportDataFormat(String value) {
        setAttributeInternal(REPORTDATAFORMAT, value);
    }

    /**
     * Gets the attribute value for ReportDataLocale, using the alias name ReportDataLocale.
     * @return the value of ReportDataLocale
     */
    public String getReportDataLocale() {
        return (String) getAttributeInternal(REPORTDATALOCALE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReportDataLocale.
     * @param value value to set the ReportDataLocale
     */
    public void setReportDataLocale(String value) {
        setAttributeInternal(REPORTDATALOCALE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedDate, using the alias name UpdatedDate.
     * @return the value of UpdatedDate
     */
    public Timestamp getUpdatedDate() {
        return (Timestamp) getAttributeInternal(UPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedDate.
     * @param value value to set the UpdatedDate
     */
    public void setUpdatedDate(Timestamp value) {
        setAttributeInternal(UPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for ServiceType, using the alias name ServiceType.
     * @return the value of ServiceType
     */
    public String getServiceType() {
        return (String) getAttributeInternal(SERVICETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ServiceType.
     * @param value value to set the ServiceType
     */
    public void setServiceType(String value) {
        setAttributeInternal(SERVICETYPE, value);
    }

    /**
     * Gets the attribute value for IsRefresh, using the alias name IsRefresh.
     * @return the value of IsRefresh
     */
    public String getIsRefresh() {
        return (String) getAttributeInternal(ISREFRESH);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsRefresh.
     * @param value value to set the IsRefresh
     */
    public void setIsRefresh(String value) {
        setAttributeInternal(ISREFRESH, value);
    }

    /**
     * Gets the attribute value for Delimiter, using the alias name Delimiter.
     * @return the value of Delimiter
     */
    public String getDelimiter() {
        return (String) getAttributeInternal(DELIMITER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Delimiter.
     * @param value value to set the Delimiter
     */
    public void setDelimiter(String value) {
        setAttributeInternal(DELIMITER, value);
    }

    /**
     * Gets the attribute value for RootNode, using the alias name RootNode.
     * @return the value of RootNode
     */
    public String getRootNode() {
        return (String) getAttributeInternal(ROOTNODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RootNode.
     * @param value value to set the RootNode
     */
    public void setRootNode(String value) {
        setAttributeInternal(ROOTNODE, value);
    }

    /**
     * Gets the attribute value for SchedulerId, using the alias name SchedulerId.
     * @return the value of SchedulerId
     */
    public BigDecimal getSchedulerId() {
        return (BigDecimal) getAttributeInternal(SCHEDULERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchedulerId.
     * @param value value to set the SchedulerId
     */
    public void setSchedulerId(BigDecimal value) {
        setAttributeInternal(SCHEDULERID, value);
    }

    /**
     * Gets the attribute value for EssJobName, using the alias name EssJobName.
     * @return the value of EssJobName
     */
    public String getEssJobName() {
        return (String) getAttributeInternal(ESSJOBNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for EssJobName.
     * @param value value to set the EssJobName
     */
    public void setEssJobName(String value) {
        setAttributeInternal(ESSJOBNAME, value);
    }

    /**
     * @param eiRepHeaderId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal eiRepHeaderId) {
        return new Key(new Object[] { eiRepHeaderId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("sc.common.model.entities.ReportSetupHeaderEO");
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("XX_SCH_REPORT_HEADER_SEQ", getDBTransaction());
        try {
            setEiRepHeaderId(ObjectConversion.convertNumberToBigDecimal(seq.getSequenceNumber()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

